package digitalhouse.android.a0317moacns1c_02.Activities;import android.content.Context;import android.content.Intent;import android.support.design.widget.TabLayout;import android.support.v4.view.PagerAdapter;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.view.inputmethod.InputMethodManager;import android.widget.EditText;import android.widget.ImageView;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import digitalhouse.android.a0317moacns1c_02.Adapters.TabItemListPagerAdapter;import digitalhouse.android.a0317moacns1c_02.Callbacks.ResultListener;import digitalhouse.android.a0317moacns1c_02.Controller.ListTmdbController;import digitalhouse.android.a0317moacns1c_02.Controller.ListUserController;import digitalhouse.android.a0317moacns1c_02.Controller.MovieController;import digitalhouse.android.a0317moacns1c_02.Controller.SerieController;import digitalhouse.android.a0317moacns1c_02.Fragments.ItemListFragment;import digitalhouse.android.a0317moacns1c_02.Helpers.AnimationHelper;import digitalhouse.android.a0317moacns1c_02.Model.Credits.Cast;import digitalhouse.android.a0317moacns1c_02.Model.DTO.CastDTO;import digitalhouse.android.a0317moacns1c_02.Model.DTO.RealmString;import digitalhouse.android.a0317moacns1c_02.Model.ListItems.ListItem;import digitalhouse.android.a0317moacns1c_02.R;import io.realm.Realm;import io.realm.RealmResults;public class ItemTabsActivity extends AppCompatActivity implements ItemListFragment.ItemClickeable {    @BindView(R.id.pager) protected ViewPager viewPager;    @BindView(R.id.tab_layout) protected TabLayout tabLayout;    @BindView(R.id.tabLayoutModes) protected TabLayout tabLayoutModes;    private ArrayList<ListItem> itemList;    private List<ItemListFragment> fragments;    private List<String> titles;    private Integer loadedCounter;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        //Remove title bar        setContentView(R.layout.activity_tabs);        ButterKnife.bind(this);        tabLayoutModes.addOnTabSelectedListener(new TabModeListener());        loadMovies();    }    private void loadMovies() {        loadedCounter = 0; // flag de carga        fragments = Arrays.asList(new ItemListFragment[3]);        titles = new ArrayList<>();        titles.add("POPULAR");        titles.add("LATEST");        titles.add("UPCOMING");        //carga de datos        ListTmdbController.getInstance().getMoviesPopular(new ResultListener<ArrayList<ListItem>>() {            @Override            public void finish(ArrayList<ListItem> itemList) {                if (ItemTabsActivity.this.isDestroyed()) return;                fragments.set(0,ItemListFragment.newInstance(itemList));                loadedCounter++;                loadViewPager();            }        });        ListTmdbController.getInstance().getMoviesLatest(new ResultListener<ArrayList<ListItem>>() {            @Override            public void finish(ArrayList<ListItem> itemList) {                if (ItemTabsActivity.this.isDestroyed()) return;                fragments.set(1,ItemListFragment.newInstance(itemList));                loadedCounter++;                loadViewPager();            }        });        ListTmdbController.getInstance().getMoviesUpcoming(new ResultListener<ArrayList<ListItem>>() {            @Override            public void finish(ArrayList<ListItem> itemList) {                if (ItemTabsActivity.this.isDestroyed()) return;                fragments.set(2,ItemListFragment.newInstance(itemList));                loadedCounter++;                loadViewPager();            }        });    }    private void loadSeries() {        loadedCounter = 0; // flag de carga        fragments = Arrays.asList(new ItemListFragment[3]);        titles = new ArrayList<>();        titles.add("POPULAR");        titles.add("LATEST");        titles.add("AIRING TODAY");        ListTmdbController.getInstance().getSeriesPopular(new ResultListener<ArrayList<ListItem>>() {            @Override            public void finish(ArrayList<ListItem> itemList) {                if (ItemTabsActivity.this.isDestroyed()) return;                fragments.set(0,ItemListFragment.newInstance(itemList));                loadedCounter++;                loadViewPager();            }        });        ListTmdbController.getInstance().getSeriesLatest(new ResultListener<ArrayList<ListItem>>() {            @Override            public void finish(ArrayList<ListItem> itemList) {                if (ItemTabsActivity.this.isDestroyed()) return;                fragments.set(1,ItemListFragment.newInstance(itemList));                loadedCounter++;                loadViewPager();            }        });        ListTmdbController.getInstance().getSeriesAiringToday(new ResultListener<ArrayList<ListItem>>() {            @Override            public void finish(ArrayList<ListItem> itemList) {                if (ItemTabsActivity.this.isDestroyed()) return;                    fragments.set(2, ItemListFragment.newInstance(itemList));                    loadedCounter++;                    loadViewPager();            }        });    }    private void loadLists() {        fragments = new ArrayList<>();        titles = new ArrayList<>();        titles.add("BOOKMARKS");        titles.add("FAVORITES");        ArrayList<ListItem> listItemsBookmarks = ListUserController.getInstance().getBookmarks();        ArrayList<ListItem> listItemsFavorites = ListUserController.getInstance().getFavorites();        fragments.add(ItemListFragment.newInstance(listItemsBookmarks));        fragments.add(ItemListFragment.newInstance(listItemsFavorites));        loadedCounter = 2;        loadViewPager();    }    private void loadViewPager() {        if (loadedCounter<fragments.size()) return; // si todavia no se cargaron todos los fragments, cancelar        PagerAdapter adapter = new TabItemListPagerAdapter(getSupportFragmentManager(), fragments, titles);        viewPager.setAdapter(adapter);        tabLayout.setupWithViewPager(viewPager);    }    @Override    protected void onStop() {        super.onStop();        AnimationHelper.stopLoader(this);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        AnimationHelper.stopLoader(this);    }    @Override    public void onClick(ListItem listItem, ImageView imageView) {        AnimationHelper.startLoader(this);        Bundle transitionBundle = AnimationHelper.getTransitionBundle(this, imageView, "poster");        // se define la accion a tomar segun el tipo del listitem (movie o serieDetails)        if (listItem.getType().equals(ListItem.TYPE_MOVIE)) {            Intent intent = new Intent(this,MovieDetailsActivity.class);            Bundle bundle = new Bundle();            bundle.putInt(MovieDetailsActivity.MOVIE_ID_KEY, listItem.getId());            intent.putExtras(bundle);            startActivityForResult(intent, 1, transitionBundle);        }        if (listItem.getType().equals(ListItem.TYPE_SERIE)) {            Intent intent = new Intent(this, SerieActivity.class);            Bundle bundle = new Bundle();            bundle.putString(SerieActivity.SERIE_ID_KEY, listItem.getId().toString());            intent.putExtras(bundle);            startActivityForResult(intent, 1,  transitionBundle);        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.searchmenu, menu);        return true;    }    // listener del tablayout de modos    private class TabModeListener implements TabLayout.OnTabSelectedListener {        @Override        public void onTabSelected(TabLayout.Tab tab) {            switch (tab.getPosition()) {                case 0:                    loadMovies();                    break;                case 1:                    loadSeries();                    break;                case 2:                    loadLists();                    break;            }        }        @Override        public void onTabUnselected(TabLayout.Tab tab) {        }        @Override        public void onTabReselected(TabLayout.Tab tab) {            onTabSelected(tab);        }    }}