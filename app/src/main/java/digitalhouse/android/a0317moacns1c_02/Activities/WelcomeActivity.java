package digitalhouse.android.a0317moacns1c_02.Activities;import android.app.Activity;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.graphics.PointF;import android.graphics.drawable.Drawable;import android.os.Handler;import android.support.annotation.NonNull;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.LinearSmoothScroller;import android.support.v7.widget.LinearSnapHelper;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.SnapHelper;import android.util.AttributeSet;import android.util.DisplayMetrics;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.TextView;import android.widget.Toast;import com.facebook.AccessToken;import com.facebook.CallbackManager;import com.facebook.FacebookCallback;import com.facebook.FacebookException;import com.facebook.FacebookSdk;import com.facebook.appevents.AppEventsLogger;import com.facebook.login.LoginManager;import com.facebook.login.LoginResult;import com.facebook.login.widget.LoginButton;import com.google.android.gms.auth.api.Auth;import com.google.android.gms.auth.api.signin.GoogleSignInAccount;import com.google.android.gms.auth.api.signin.GoogleSignInOptions;import com.google.android.gms.auth.api.signin.GoogleSignInResult;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.SignInButton;import com.google.android.gms.common.api.GoogleApiClient;import com.google.android.gms.common.api.OptionalPendingResult;import com.google.android.gms.common.api.ResultCallback;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.AuthCredential;import com.google.firebase.auth.AuthResult;import com.google.firebase.auth.FacebookAuthProvider;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.auth.GoogleAuthProvider;import java.util.ArrayList;import java.util.Collections;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import digitalhouse.android.a0317moacns1c_02.Adapters.ImageRecyclerAdapter;import digitalhouse.android.a0317moacns1c_02.Helpers.Toaster;import digitalhouse.android.a0317moacns1c_02.R;public class WelcomeActivity extends AppCompatActivity implements View.OnClickListener, GoogleApiClient.OnConnectionFailedListener {    @BindView(R.id.textViewSkipLogin) protected TextView skipLogin;    @BindView(R.id.login_button) protected LoginButton facebookLogin;    @BindView(R.id.sign_in_button) protected SignInButton googleLogin;    @BindView(R.id.recyclerVIewWelcomeAct) protected RecyclerView recyclerView;    @BindView(R.id.buttonLogout) Button buttonLogout;    @BindView(R.id.textViewLoggedInAs) TextView textViewLoggedIn;    @BindView(R.id.textViewUserLogged) TextView textViewUserLogged;    private CallbackManager callbackManager;    private GoogleApiClient mGoogleApiClient;    private ProgressDialog mProgressDialog;    private RecyclerView.Adapter adapter;    private FirebaseAuth mAuth;    private static final String TAG = "WelcomeActivty";    private static final int RC_SIGN_IN = 9001;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_welcome);        ButterKnife.bind(this);        mAuth = FirebaseAuth.getInstance();        setUpFacebookLogin();        setUpGoogleLogin();        setUpLoginBtnsStyle();        setUpImageRecyclerView();        setUpSnapHelper();        buttonLogout.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                logout();            }        });    }    private void logout() {        LoginManager.getInstance().logOut();        Auth.GoogleSignInApi.signOut(mGoogleApiClient);        signInAnonymously();    }    private void signInAnonymously(){        mAuth.signInAnonymously()                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {                    @Override                    public void onComplete(@NonNull Task<AuthResult> task) {                        updateUI(mAuth.getCurrentUser());                    }                });    }    private void setUpImageRecyclerView(){        adapter = new ImageRecyclerAdapter(this, obtainImagesIds());        final int speedScroll = 4000;        final Handler handler = new Handler();        final Runnable runnable = new Runnable() {            int count = 0;            boolean flag = true;            @Override            public void run() {                if(count < adapter.getItemCount()){                    if(count==adapter.getItemCount()-1){                        flag = false;                    }else if(count == 0){                        flag = true;                    }                    if(flag) count++;                    else count--;                    recyclerView.smoothScrollToPosition(count);                    handler.postDelayed(this,speedScroll);                }            }        };        handler.postDelayed(runnable,speedScroll);        recyclerView.setAdapter(adapter);        recyclerView.setLayoutManager(new CustomLinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false));    }    private void setUpSnapHelper(){        SnapHelper snapHelper = new LinearSnapHelper();        snapHelper.attachToRecyclerView(recyclerView);    }    private List<Integer> obtainImagesIds(){        List<Integer> ids = new ArrayList<>();        ids.add(R.drawable.background_welcome_2);        ids.add(R.drawable.background_welcome_1);        ids.add(R.drawable.background_welcome_3);        ids.add(R.drawable.background_welcome_4);        ids.add(R.drawable.background_welcome_5);        ids.add(R.drawable.background_welcome_6);        ids.add(R.drawable.background_welcome_7);        ids.add(R.drawable.background_welcome_8);        ids.add(R.drawable.background_welcome_10);        ids.add(R.drawable.background_welcome_11);        ids.add(R.drawable.background_welcome_12);        ids.add(R.drawable.background_welcome_13);        ids.add(R.drawable.background_welcome_14);        Collections.shuffle(ids);        return ids;    }    private void setUpFacebookLogin(){        FacebookSdk.sdkInitialize(getApplicationContext());        AppEventsLogger.activateApp(this);        callbackManager = CallbackManager.Factory.create();        LoginManager.getInstance().registerCallback(callbackManager,                new FacebookCallback<LoginResult>() {                    @Override                    public void onSuccess(LoginResult loginResult) {                        handleFacebookAccessToken(loginResult.getAccessToken());                    }                    @Override                    public void onCancel() {                        Toaster.getInstance().toast("Facebook login cancelled");                    }                    @Override                    public void onError(FacebookException exception) {                        Toaster.getInstance().toast("Facebook login error");                    }                });    }    private void setUpGoogleLogin(){        googleLogin.setOnClickListener(this);        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)                .requestIdToken("738650580646-05nhqoan890ua1756q3mf4r35eltpqn2.apps.googleusercontent.com")                .requestEmail()                .build();        mGoogleApiClient = new GoogleApiClient.Builder(this)                .enableAutoManage(this /* FragmentActivity */, this /* OnConnectionFailedListener */)                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)                .build();    }    private void setUpLoginBtnsStyle(){        googleLogin.setSize(SignInButton.SIZE_WIDE);        float fbIconScale = 1.45F;        Drawable drawable = getResources().getDrawable(com.facebook.R.drawable.com_facebook_button_icon);        drawable.setBounds(0, 0, (int)(drawable.getIntrinsicWidth()*fbIconScale),                (int)(drawable.getIntrinsicHeight()*fbIconScale));        facebookLogin.setCompoundDrawables(drawable, null, null, null);        facebookLogin.setCompoundDrawablePadding(getResources().                getDimensionPixelSize(R.dimen.fb_margin_override_textpadding));        facebookLogin.setPadding(                getResources().getDimensionPixelSize(                        R.dimen.fb_margin_override_lr),                getResources().getDimensionPixelSize(                        R.dimen.fb_margin_override_top),                getResources().getDimensionPixelSize(                        R.dimen.fb_margin_override_lr),                getResources().getDimensionPixelSize(                        R.dimen.fb_margin_override_bottom));    }    @Override    public void onStart() {        super.onStart();        updateUI(mAuth.getCurrentUser());        OptionalPendingResult<GoogleSignInResult> opr = Auth.GoogleSignInApi.silentSignIn(mGoogleApiClient);        if (opr.isDone()) {            // If the user's cached credentials are valid, the OptionalPendingResult will be "done"            // and the GoogleSignInResult will be available instantly.            Log.d(TAG, "Got cached sign-in");            GoogleSignInResult result = opr.get();            handleSignInResult(result);        } else {            // If the user has not previously signed in on this device or the sign-in has expired,            // this asynchronous branch will attempt to sign in the user silently.  Cross-device            // single sign-on will occur in this branch.            showProgressDialog();            opr.setResultCallback(new ResultCallback<GoogleSignInResult>() {                @Override                public void onResult(GoogleSignInResult googleSignInResult) {                    hideProgressDialog();                    handleSignInResult(googleSignInResult);                }            });        }    }    @Override    protected void onResume() {        super.onResume();        hideProgressDialog();        setUpImageRecyclerView();    }    @Override    protected void onStop() {        super.onStop();        if (mProgressDialog != null) {            mProgressDialog.dismiss();        }    }    @Override    public void onConnectionFailed(ConnectionResult connectionResult) {        // An unresolvable error has occurred and Google APIs (including Sign-In) will not        // be available.        Log.d(TAG, "onConnectionFailed:" + connectionResult);    }    @Override    public void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        callbackManager.onActivityResult(requestCode, resultCode, data);        if (requestCode == RC_SIGN_IN) {            GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);            handleSignInResult(result);        }    }    private void handleSignInResult(GoogleSignInResult result) {        Log.d(TAG, "handleSignInResult:" + result.isSuccess());        if (result.isSuccess()) {            // Signed in successfully, show authenticated UI.            GoogleSignInAccount acct = result.getSignInAccount();            firebaseAuthWithGoogle(acct);        }    }    private void firebaseAuthWithGoogle(GoogleSignInAccount acct) {        Log.d(TAG, "firebaseAuthWithGoogle:" + acct.getId());        AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);        mAuth.signInWithCredential(credential)                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {                    @Override                    public void onComplete(@NonNull Task<AuthResult> task) {                        if (task.isSuccessful()) {                            // Sign in success, update UI with the signed-in user's information                            Log.d(TAG, "signInWithCredential:success");                            FirebaseUser user = mAuth.getCurrentUser();                            updateUI(user);                        } else {                            // If sign in fails, display a message to the user.                            Log.w(TAG, "signInWithCredential:failure", task.getException());                            Toaster.getInstance().toast("Google authentication failed.");                            signInAnonymously();                        }                        // ...                    }                });    }    private void handleFacebookAccessToken(AccessToken token) {        Log.d(TAG, "handleFacebookAccessToken:" + token);        AuthCredential credential = FacebookAuthProvider.getCredential(token.getToken());        mAuth.signInWithCredential(credential)                .addOnCompleteListener(this, new OnCompleteListener<AuthResult>() {                    @Override                    public void onComplete(@NonNull Task<AuthResult> task) {                        if (task.isSuccessful()) {                            // Sign in success, update UI with the signed-in user's information                            Log.d(TAG, "signInWithCredential:success");                            FirebaseUser user = mAuth.getCurrentUser();                            updateUI(user);                        } else {                            // If sign in fails, display a message to the user.                            Log.w(TAG, "signInWithCredential:failure", task.getException());                            Toaster.getInstance().toast("Authentication failed.");                            signInAnonymously();                        }                        // ...                    }                });    }    private void updateUI(FirebaseUser user) {        if (user==null || user.isAnonymous()) {            facebookLogin.setVisibility(View.VISIBLE);            googleLogin.setVisibility(View.VISIBLE);            buttonLogout.setVisibility(View.GONE);            textViewLoggedIn.setVisibility(View.GONE);            textViewUserLogged.setVisibility(View.GONE);        } else {            facebookLogin.setVisibility(View.GONE);            googleLogin.setVisibility(View.GONE);            buttonLogout.setVisibility(View.VISIBLE);            textViewLoggedIn.setVisibility(View.VISIBLE);            textViewUserLogged.setVisibility(View.VISIBLE);            textViewUserLogged.setText(user.getDisplayName());        }    }    @Override    public void onClick(View v) {        switch (v.getId()) {            case R.id.sign_in_button:                signIn();                break;            //case R.id.sign_out_button:              //  signOut();              //  break;           // case R.id.disconnect_button:              //  revokeAccess();               // break;        }    }    private void signIn() {        Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);        startActivityForResult(signInIntent, RC_SIGN_IN);    }    private void showProgressDialog() {        if (mProgressDialog == null) {            mProgressDialog = new ProgressDialog(this);            mProgressDialog.setIndeterminate(true);        }        mProgressDialog.show();    }    private void hideProgressDialog() {        if (mProgressDialog != null && mProgressDialog.isShowing()) {            mProgressDialog.hide();        }    }    public class CustomLinearLayoutManager extends LinearLayoutManager {        public CustomLinearLayoutManager(Context context) {            super(context);        }        public CustomLinearLayoutManager(Context context, int orientation, boolean reverseLayout) {            super(context, orientation, reverseLayout);        }        public CustomLinearLayoutManager(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {            super(context, attrs, defStyleAttr, defStyleRes);        }        @Override        public void smoothScrollToPosition(RecyclerView recyclerView, RecyclerView.State state, int position) {            final LinearSmoothScroller linearSmoothScroller =                    new LinearSmoothScroller(recyclerView.getContext()) {                        private static final float MILLISECONDS_PER_INCH = 200f;                        @Override                        public PointF computeScrollVectorForPosition(int targetPosition) {                            return CustomLinearLayoutManager.this                                    .computeScrollVectorForPosition(targetPosition);                        }                        @Override                        protected float calculateSpeedPerPixel                                (DisplayMetrics displayMetrics) {                            return MILLISECONDS_PER_INCH / displayMetrics.densityDpi;                        }                    };            linearSmoothScroller.setTargetPosition(position);            startSmoothScroll(linearSmoothScroller);        }    }}